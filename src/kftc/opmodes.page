div.withSidebar
    #[frag sidebar]

    div#main.content
        div.article
            p
                "I've been using Java since I turned 13, so when I heard that FTC was moving to a Java/Android programming solution (instead of the god-awful RobotC/Mindstorms we'd been stuck with) for my last year on the team, I was ecstatic! However, this quickly changed when I realized that the OpMode SDK was &mdash; at least in my opinion &mdash; more of a mess than before!"

            p
                "My top three grievances with the OpMode SDK are listed below"
                ol
                    li < "The OpMode lifecycle required delayed initialization"
                    li
                        "There was no recommended way to share hardware definitions"
                        p.note < "This was actually 'fixed' in v2.0 of the SDK; however, I'm still personally dissatisfied with their solution, as it's more of a disgusting hack (coming from me!) than something that they built in support for."
                    li < "There was still no way for configurable variables"
                "And, oddly enough, if you look at the sidebar, you'll notice three sub-sections, which correspond to these."


        div.article
            a(name: "lifecycle")
            h2 < "The New Lifecycle"
            p
                "The solution to this was redesigning the OpMode lifecycle in a way that wouldn't force declaration and initialization to occur at different places. This is more beneficial than simply allowing the variable's creation and assignment to happen in one place (which helps to make sure that the variable has been initialized *before* it's run and a `NullPointerException` is thrown), but it also allows for the hardware devices to be marked as `val`s and ensure that their values will never be null nor will they be reassigned."

            p
                "The moment any subclass of `KAbstractOpMode` is instantiated, it already possess a reference to the hardware map, controllers, and telemetry; the entire environment is completely initialized &mdash; ensured to be non-null."

            pre < code.kotlin
                "@TeleOp( name = &quot;MyTeleOp&quot; )"
                "class MyTeleOp : KOpMode()"
                "{"
                "    private val motorLeft: DcMotor = get( &quot;motor_left&quot; );"
                ""
                "    public override fun loop()"
                "    {"
                "        motorLeft.power = 1.0;"
                "    }"
                "}"

        div.article
            a(name: "hardware")
            h2 < "Hardware Definitions"
            p
                "While the above code snippet is valid, this is not the recommended route to go for hardware initialization. If you have used v2.+ of the standard sdk, then you will know that they encourage separating the hardware information from the OpMode class, and this is also encouraged in kftc; however, there is a little bit more of an API for it, rather than a completely detached class from the rest of the sdk."

            p
                "In kftc, there is an abstract class called `HardwareDefinition`, which provides convenience access to the hardware map and an improved method to get HardwareExtensions as well. To access the hardware definition inside the OpMode, simply create a blank companion object which inherits from it. Now, anything defined in the hardware definition file can be referenced directly, as if it were defined in the same class. This is different than having a separate field (which must be initialized manually during `init()`) where the name of the field must be written prior to the hardware device."

            pre < code.kotlin
                "abstract class MyHardwareDefinition : HardwareDefinition()"
                "{"
                "    val motorLeft: DcMotor = get( &quot;motor_left&quot; );"
                "}"
                ""
                "@TeleOp( name = &quot;My TeleOp&quot; )"
                "class MyTeleOp : KOpMode()"
                "{"
                "    companion object : MyHardwareDefinition();"
                ""
                "    override fun loop()"
                "    {"
                "        motorLeft.power = 1.0;"
                "    }"
                "}"

        div.article
            a(name: "configuration")
            h2 < "Configuration"
            p
                "Perhaps the most important part of kftc is the configuration framework. It's super simple to implement in your KOpModes and easy to use. Now, maybe you can't think of any time that configurable variables might be useful, so here are a few examples"
                ul
                    li < "A boolean indicating which alliance you're on"
                    li < "Sensor sensitivities"
                    li
                        "Autonomous motor powers"
                        p.note < "This is especially useful when debugging autonomous programs!"
                    li < "Time delays for autonomous"

            h3 < "Okay, so how do I implement them?"

            pre < code.kotlin
                "class MyOpMode : KOpMode()"
                "{"
                "    // If there is no configured value for the given name"
                "    //    then the second value (the default) is returned"
                "    //    instead"
                "    private val myBooleanValue = get( &quot;My Boolean Value's Name&quot;, false );"
                "    private val myLongValue    = get( &quot;My Long Value's Name&quot;, 69L );"
                "    private val myDoubleValue  = get( &quot;My Double Value's Name&quot, 4.20 );"
                "    private val myStringValue  = get( &quot;My String Value's name&quot;, &quot;foobar&quot; );"
                "}"
                ""
                "// configuration method signatures for KOpMode & KLinearOpMode"
                "get( name: String, default: Boolean ): Boolean"
                "get( name: String, default: Long ): Long"
                "get( name: String, default: Double ): Double"
                "get( name: String, default: String ): String"


            p
                "Only four types of variables can be configured: `boolean`s, `long`s, `double`s, and `String`s. And of course, these variables can be casted down to `int`s and `float`s, `long` and `double` were simply chosen as they are less restrictive. _Any number of these variables can exist for any KOpMode_ (or KLinearOpMode)! The only requirement for the variables is that they do not have conflicting names and types (i.e. you can't have a *boolean* named &quot;Garrett&quot; and a *string* named &quot;Garrett&quot;, as they are different types)."
                p.note < "A great workaround for this is to use things that are roughly the synonyms, like &quot;My name is Hugh Mungus&quot; and &quot;Sexual Harassment&quot;"

            h3 < "Great! Now how do I configure them?"
            p
                "Of course, configurable variables would be utterly useless if you couldn't *configure* them, so, naturally, there is a way to configure these variables. Now, the backend for this process is ugly (to say the least), but the front-end is very easy to use. In the top-right corner of the robot controller app's screen, there is a little robot icon, pay attention to this, as when it's blinking red, you can tap on it and open the OpMode and Profile Configuration tool."
                
            img.center
                src: "/media/kftc/robot-icon.gif"
                alt: "The blinking robot icon"
                height: "75px"
                style: "border: 1px solid black;"

            p
                "The following images are samples to show how to configure profiles for a KOpMode, after opening the configuration screen."

            table
                tr
                    td < img.center
                        src: "/media/kftc/config_1.png"
                        alt: "KOpMode Overview"
                        width: "95%"

                    td < img.center
                        src: "/media/kftc/config_2.png"
                        alt: "Viewing profiles for a KOpMode"
                        width: "95%"
                    
                    td < img.center
                        src: "/media/kftc/config_3.png"
                        alt: "Creating a new profile"
                        width: "95%"

                tr
                    td < p.caption < "KOpMode Overview"
                    td < p.caption < "Viewing profiles for a KOpMode"
                    td < p.caption < "Creating a new profile"

                tr
                    td < img.center
                        src: "/media/kftc/config_4.png"
                        alt: "Viewing the new profile"
                        width: "95%"

                    td < img.center
                        src: "/media/kftc/config_5.png"
                        alt: "Selecting active profile"
                        width: "95%"

                    td < img.center
                        src: "/media/kftc/config_6.png"
                        alt: "Viewing the new profile"
                        width: "95%"

                tr
                    td < p.caption < "Viewing the new profile"
                    td < p.caption < "Selecting active profile"
                    td < p.caption < "Viewing the new profile"





